'''
2023/11/25 00:00|Домашнее задание по теме "Сложные моменты и исключения в стеке вызовов функции".
Цель: понять как работают исключения внутри функций и как обрабатываются эти исключения на практике
при помощи try-except.

Задача "План перехват":
Напишите 2 функции:
Функция personal_sum(numbers):
Должна принимать коллекцию numbers.
Подсчитывать сумму чисел в numbers путём перебора и увеличивать переменную result.
Если же при переборе встречается данное типа отличного от числового, то обработать исключение TypeError,
увеличив счётчик incorrect_data на 1.
В конечном итоге функция возвращает кортеж из двух значений: result - сумма чисел, incorrect_data - кол-во
некорректных данных.
Функция calculate_average(numbers)
Среднее арифметическое - сумма всех данных делённая на их количество.
Должна принимать коллекцию numbers и возвращать: среднее арифметическое всех чисел.
Внутри для подсчёта суммы используйте функцию personal_sum написанную ранее.
Т.к. коллекция numbers может оказаться пустой, то обработайте исключение ZeroDivisionError при делении на 0 и верните 0.
Также в numbers может быть записана не коллекция, а другие типы данных, например числа. Обработайте исключение
TypeError выводя строку 'В numbers записан некорректный тип данных'. В таком случае функция просто вернёт None.

Пункты задачи:
Создайте функцию personal_sum на основе условий задачи.
Создайте функцию calculate_average на основе условий задачи.
Вызовите функцию calculate_average несколько раз, передав в неё данные разных вариаций.
Пример результата выполнения программы:
Пример выполнения программы:
print(f'Результат 1: {calculate_average("1, 2, 3")}') # Строка перебирается, но каждый символ - строковый тип
print(f'Результат 2: {calculate_average([1, "Строка", 3, "Ещё Строка"])}') # Учитываются только 1 и 3
print(f'Результат 3: {calculate_average(567)}') # Передана не коллекция
print(f'Результат 4: {calculate_average([42, 15, 36, 13])}') # Всё должно работать

Вывод на консоль:
Некорректный тип данных для подсчёта суммы - 1
Некорректный тип данных для подсчёта суммы - ,
Некорректный тип данных для подсчёта суммы -
Некорректный тип данных для подсчёта суммы - 2
Некорректный тип данных для подсчёта суммы - ,
Некорректный тип данных для подсчёта суммы -
Некорректный тип данных для подсчёта суммы - 3
Результат 1: 0
Некорректный тип данных для подсчёта суммы - Строка
Некорректный тип данных для подсчёта суммы - Ещё Строка
Результат 2: 2.0
В numbers записан некорректный тип данных
Результат 3: None
Результат 4: 26.5
'''
import logging

logging.basicConfig(level=logging.INFO, filename="py_log.log", filemode="w",
                    format="%(asctime)s %(levelname)s %(message)s")
logging.info("")
logging.info("")
logging.info("")

def personal_sum(numbers):
    result = 0
    incorrect_data = 0
    #logging.info("-----")
    logging.info("-----------------------str 60-----------------------=-----------------------")
    logging.info(type(numbers))
    logging.info(numbers)

    for value in numbers:
            if isinstance(value, int):
                logging.info("-----------------------str 68-----------------------")
                result += int(value)
                #result += int(value)
                #logging.info("str 68")
                logging.info(value)

                # tuple[result] = value

                #logging.info("str 73")
                logging.info("-----------------------str 75-----------------------")
                logging.info(type(value))
                logging.info(isinstance(value, int))
                logging.info("-----------------------str 78-----------------------")
                #logging.info("str 75")
                # tup22[incorrect_data] = incorrect_data
                #print(value)
            else:
                try:
                    result += 1
                    #result += 1
                    #logging.info("str 82")
                    #logging.info(value)

                    # tuple[result] = value

                    #logging.info("str 87")
                    logging.info("-----------------------str 91-----------------------")
                    logging.info(type(value))
                    logging.info(value)
                    logging.info(result)
                    logging.info(isinstance(value, int))
                    logging.info("-----------------------str 94-----------------------")
                    #logging.info("str 90")
                    # tup22[incorrect_data] = incorrect_data
                    #print("str 90")
                    print(f"Некорректный тип данных для подсчёта суммы - {value}")
                    logging.info(f"Некорректный тип данных для подсчёта суммы - {value}")
                    logging.info("-----------------------str 105-----------------------")
                    #print("str 91")
                except TypeError:
                    print(f'{incorrect_data}')
                    #logging.info(f"---str 98---{incorrect_data}")
                    logging.info(f"--------str 98--------{incorrect_data}")
                    #incorrect_data = incorrect_data + 1
                    incorrect_data += 1
                    logging.info(f"--------str 999--------{incorrect_data}")




    logging.info("-----------------------str 96-----------------------")

    logging.info(result)
    logging.info(incorrect_data)
    logging.info("-----------------------str 99-----------------------")
    logging.info([result, incorrect_data])
    logging.info(f"result {[result, incorrect_data]}")
    #print(f"result {result, incorrect_data}")
    #print(f"result {[result, incorrect_data]}")
    #logging.info(f"Результат {[result, incorrect_data]}")
    logging.info("-----------------------str 101-----------------------")
    logging.info("-----")
    #return f"Результат {[result, incorrect_data]}"
    #return f"Результат {result, incorrect_data}"
    #return f"Результат {[result, incorrect_data]}"
    return [result, incorrect_data]


def calculate_average(numbers):
    logging.info("--------------------str 128-----------------------")

    logging.info("--------------------str 130-----------------------")
    logging.info(f"--------------------{type(numbers)}-----------------------")
    logging.info("--------------------str 132-----------------------")

    print(f"{type(numbers)}")

    logging.info("--------------------str 107-----------------------")

    #logging.info(isinstance(numbers, int))
    logging.info("--------------------str 129-----------------------")
    #if isinstance(numbers, int):
    #personal_sum(numbers)

    if isinstance(numbers, str):
        #personal_sum(numbers)
        logging.info(f"--------------------str 146-----------------------")
        try:
            logging.info(f"--------------------str 162-----------------------")
            personal_sum(numbers)
            # result_person = personal_sum(numbers)
            # # result_person[0]
            # correct_num = len(numbers) - result_person[1]
            # avg = result_person[0] / correct_num

           #return personal_sum(numbers) / 0
        except TypeError:
            logging.info(f"--------------------str 150-----------------------")
            #print(personal_sum(numbers))
            #logging.info(f"{personal_sum(numbers)}")
            logging.info(f"--------------------str 148-----------------------")
            print(f"В numbers записан некорректный тип данных.")


    if isinstance(numbers, list):
        logging.info(f"--------------------str 146-----------------------")
        logging.info(f"--------------------{type(numbers)}-----------------------")
        logging.info(f"--------------------{numbers}-----------------------")
        #try:
        logging.info(f"--------------------str 162-----------------------")
        result_person = personal_sum(numbers)
        #result_person[0]
        correct_num = len(numbers) - result_person[1]
        avg = result_person[0] / correct_num
        logging.info(f"--------------------str 170.1-----------------------=----------------------------------------------")
        logging.info(f"--------------------{result_person}-----------------------")
        logging.info(f"--------------------{len(numbers)}-----------------------")
        logging.info(f"--------------------{result_person[1]}-----------------------")
        logging.info(f"--------------------{correct_num}-----------------------")
        logging.info(f"--------------------{avg}-----------------------")
        logging.info(f"--------------------str 170.2-----------------------=----------------------------------------------")
        #personal_sum(numbers)
        #len(numbers)
        # for value_one in numbers:
        #     logging.info(f"--------------------str 167-----------------------")
        #     logging.info(f"--------------------{value_one}-----------------------")


        if correct_num == 0:  # Избегаем деления на 0
            return 0
        try:
                    #result_person = personal_sum(numbers)
                    logging.info(f"--------------------str 166.1-----------------------")
                    #logging.info(f"--------------------{type(value_one)}-----------------------")
                    #logging.info(f"--------------------{value_one}-----------------------")
                   #sum(numbers)
                    result = 0

                    # for value in value_one:
                    #     logging.info(f"--------------------str 166-----------------------")
                    #     logging.info(f"--------------------{type(value)}-----------------------")
                    #     logging.info(f"--------------------{result}-----------------------")
                    #     logging.info(f"--------------------{value}-----------------------")
                    #     logging.info(f"--------------------str 167-----------------------")
                    #     result = result + value

                    logging.info(f"--------------------str 176-----------------------")
                    #logging.info(f"--------------------{type(personal_sum(numbers))}-----------------------")
                    logging.info(f"--------------------{type(result_person)}-----------------------")
                    logging.info(f"--------------------{result}-----------------------")
                    logging.info(f"--------------------str 164-----------------------")
                    print(f"--------------------{type(result_person)}-----------------------")
                    #logging.info(f"--------------------{sum(personal_sumpersonal_sum(numbers))}-----------------------")
                    #logging.info(f"--------------------{len(personal_sum(numbers))}-----------------------")
                    #average = sum(numbers) / len(numbers)
                    #average = sum(personal_sum(numbers)) / len(personal_sum(numbers))
                    #average = sum(result_person) / len(result_person)
                    logging.info("--------------------str 178-----------------------")
                    logging.info(f"--------------------{result}-----------------------")
                    logging.info(f"--------------------{sum(result_person)}-----------------------")
                    logging.info(f"--------------------{len(result_person)}-----------------------")
                    #logging.info(f"--------------------{sum(numbers)}-----------------------")
                    #logging.info(f"--------------------{len(numbers)}-----------------------")
                    #logging.info(f"result {average}")
                    logging.info("--------------------str 180-----------------------")
                    #return sum(result_person) / len(result_person)
                    return avg

                   #return personal_sum(numbers) / 0

        except ZeroDivisionError:
            return 0
        except TypeError:
            print('Некорректные данные переданы в numbers')
            return None








    if isinstance(numbers, int):
        logging.info("--------------------str 180-----------------------")
        #personal_sum(numbers)
        try:
            logging.info("--------------------str 131-----------------------")


            #logging.info(f"--------------------{sum(numbers)}-----------------------")
            #logging.info(f"--------------------{len(numbers)}-----------------------")
            #average = sum(numbers) / len(numbers)
            #logging.info(f"result {average}")
            logging.info("--------------------str 134-----------------------")
            #print(f"result {average}")
            #personal_sum(numbers) == 0
            #return personal_sum(numbers)
        except TypeError:
            #numbers = [4, 8, 6, 5, 3, 2]
            #average = sum(numbers) / len(numbers)
            #print(f"{average}")
            print(f"В numbers записан некорректный тип данных.")
            #pass




print(f'Результат 1: {calculate_average("1, 2, 3")}') # Строка перебирается, но каждый символ - строковый тип
print(f'Результат 2: {calculate_average([1, "Строка", 3, "Ещё Строка"])}') # Учитываются только 1 и 3
print(f'Результат 3: {calculate_average(567)}') # Передана не коллекция
print(f'Результат 4: {calculate_average([42, 15, 36, 13])}') # Всё должно работать
