'''
2023/10/07 00:00|Самостоятельная работа по уроку "Распаковка параметров и параметры функции"
Домашнее задание по уроку "Распаковка параметров и параметры функции"

Цель задания: Освоить создание функций с параметрами по умолчанию и практику вызова этих функций с
различным количеством аргументов.

Задача "Распаковка":
1.Функция с параметрами по умолчанию:
Создайте функцию print_params(a = 1, b = 'строка', c = True), которая принимает три параметра со значениями
по умолчанию (например сейчас это: 1, 'строка', True).
Функция должна выводить эти параметры.
Вызовите функцию print_params с разным количеством аргументов, включая вызов без аргументов.
Проверьте, работают ли вызовы print_params(b = 25) print_params(c = [1,2,3])
'''

def print_params(a = 1, b = 'строка', c = True):
  print(a, b, c)

print(f"\nБез аргументов:")
print(print_params()) # Вывод: 1 строка True. Выводит дефолтные значения

print(f"\nС разными тремя аргументами:")
print(2)
print(print_params(1, 2, 3)) # Вывод: 1 2 3. Выводит заданные значения

print(f"\nС двумя разными аргументами:")
print(3)
print(print_params(4, 5)) # Вывод: 4 5 True. Заменяет значения первых двух параметров a, b

print(f"\nС одним разным аргументом:")
print(4)
print_params(b = 25) # Работает, заменяя дефолтное значение b на значение 25

print(f"\nС одним разным аргументом:")
print_params(c = [1, 2, 3]) # Работает, заменяя дефолтное значение c на значение [1,2,3]

print(f"\nС четырьмя разными аргументами не работает, так как в принимающей функции заданных параметров меньше, чем мы ей передаем")
# print(print_params(6, 7, 8, 9))

'''
2.Распаковка параметров:
Создайте список values_list с тремя элементами разных типов.
Создайте словарь values_dict с тремя ключами, соответствующими параметрам 
функции print_params, и значениями разных типов.
Передайте values_list и values_dict в функцию print_params, используя распаковку 
параметров (* для списка и ** для словаря).
'''

# def print_params(*values_list, **values_dict):
#     print(values_list)
#     print(values_dict)


values_list = [2, 'строка1', False]
values_dict = {'1': 7, '2': 'строка', '3': True}

# print()
# print("Распаковка списка")
# print(print_params(*values_list))
# print("Распаковка словаря")


print("\nРаспаковка списка:")
print(print_params(*values_list))
print("\nРаспаковка словаря:")
print(print_params(*values_dict))
# a = print_params(**values_dict)
# print(a)


'''
3.Распаковка + отдельные параметры:
Создайте список values_list_2 с двумя элементами разных типов
Проверьте, работает ли print_params(*values_list_2, 42)
Пример результата выполнения программы:
Исходный код:
values_list_2 = [54.32, 'Строка' ]
print_params(*values_list_2, 42)
Вывод на консоль:
54.32 'Строка' 42

Примечания:
Использование параметров по умолчанию позволяет функциям быть гибкими и удобными в использовании.
Распаковка параметров из списка и словаря позволяет передавать группы значений в функцию, что упрощает работу с данными.
Важно!
Не передавайте списки задавая по умолчанию пустой список или другой изменяемый тип данных!
В таком случае, если этот список будет изменён внутри функции, то на следующий вызов функции он останется в том же состоянии.
def a(my_list = [])) – это приводит к ошибкам!

Можно передавать вот так(список создаётся локально, мы не влияем на его изменение вне функции)
def append_to_list(item, list_my=None):
  if list_my is None:
   list_my = []
  list_my.append(item)
print(list_my)

'''

values_list_2 = [54.32, 'Строка']
print('Проверьте, работает ли print_params(*values_list_2, 42)')
print(print_params(*values_list_2, 42))
print('Работает')